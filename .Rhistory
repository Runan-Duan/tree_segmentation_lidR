# Install required packages
# Clear environment
rm(list = ls(globalenv()))
# Load packages
library(lidR)
library(mapview)
library(sf)
library(future)
library(stringr)
threads = 8
get_lidr_threads()
set_lidr_threads(threads)
ctg <- readLAScatalog("tiles_data/bretten01_leafon/las_output")
# For LAScatalog object
crs(ctg) <- 25832
st_crs(ctg) <- 25832
st_bbox(ctg)
ctg
# Specify the filename(s) to remove (e.g., file 3)
file_to_remove <- c("tiles_data/bretten01_leafon/las_output/476616.0870000124_5428970.0309999995_8.laz",
"tiles_data/bretten01_leafon/las_output/476616.08599996567_5429057.297000885_10.laz",
"tiles_data/bretten01_leafon/las_output/476624.8219999969_5429157.286998749_11.laz",
"tiles_data/bretten01_leafon/las_output/476616.0869998932_5429157.287998199_12.laz")
# Filter the catalog to exclude the specified file
ctg_filtered <- ctg[!ctg@data$filename %in% file_to_remove, ]
plot(ctg_filtered, map = TRUE)
# check if files have .lax
is.indexed(ctg_filtered)
# generate index files
lidR:::catalog_laxindex(ctg_filtered)
# check if files have .lax
is.indexed(ctg_filtered)
# generate index files
lidR:::catalog_laxindex(ctg_filtered)
opt_chunk_size(ctg_filtered) <- 40
opt_chunk_buffer(ctg_filtered) <- 5
# Visualize and summarize the catalog chunks
plot(ctg_filtered, chunk = TRUE)
#las_check(ctg_filtered, deep = TRUE)
summary(ctg_filtered)
help("catalog_apply")
norm_input_dir <- "tiles_data/bretten01_leafon/norm"
ctg_norm <- readLAScatalog()
norm_input_dir <- "tiles_data/bretten01_leafon/norm"
ctg_norm <- readLAScatalog(norm_input_dir)
norm_input_dir <- "tiles_data/bretten01_leafon/norm"
ctg_norm <- readLAScatalog(norm_input_dir)
summary(ctg_norm)
norm_input_dir <- "tiles_data/bretten01_leafon/norm"
ctg_norm <- readLAScatalog(norm_input_dir)
plot(ctg_norm, chunk=TRUE)
norm_input_dir <- "tiles_data/bretten01_leafon/norm"
ctg_norm <- readLAScatalog(norm_input_dir)
plot(ctg_norm, chunk=TRUE, map=TRUE)
# Filter tree points where return number is 1
trees_first_echo <- filter_poi(ctg_norm, ReturnNumber == 1L)
help("catalog_select")
# Filter tree points where return number is 1
trees_first_echo <- catalog_select(ctg_norm, ReturnNumber == 1L)
# Clear environment
#rm(list = ls(globalenv()))
# Load packages
library(lidR)
library(mapview)
library(sf)
library(future)
library(stringr)
# Set up threads
threads = 8
get_lidr_threads()
set_lidr_threads(threads)
ctg <- readLAScatalog("tiles_data/bretten01_leafon/las_output")
# For LAScatalog object
crs(ctg) <- 25832
st_crs(ctg) <- 25832
st_bbox(ctg)
ctg
# Specify the filenames to remove
file_to_remove <- c("tiles_data/bretten01_leafon/las_output/476616.0870000124_5428970.0309999995_8.laz",
"tiles_data/bretten01_leafon/las_output/476616.08599996567_5429057.297000885_10.laz",
"tiles_data/bretten01_leafon/las_output/476624.8219999969_5429157.286998749_11.laz",
"tiles_data/bretten01_leafon/las_output/476616.0869998932_5429157.287998199_12.laz")
# Filter the catalog to exclude the specified file
ctg_filtered <- ctg[!ctg@data$filename %in% file_to_remove, ]
plot(ctg_filtered, map = TRUE)
opt_chunk_size(ctg_filtered) <- 40
opt_chunk_buffer(ctg_filtered) <- 5
# Visualize and summarize the catalog chunks
plot(ctg_filtered, chunk = TRUE)
norm_input_dir <- "tiles_data/bretten01_leafon/norm"
ctg_norm <- readLAScatalog(norm_input_dir)
plot(ctg_norm, chunk=TRUE, map=TRUE)
# Variable window definition
f <- function(x) {
y <- numeric(length(x))
y[x < 5] <- 1
y[x >= 5 & x <= 10] <- 2
y[x >= 10 & x <= 20] <- 3
y[x > 20] <- 4
return(y)
}
heights <- seq(-5,100,0.5)
ws <- f(heights)
plot(heights, ws, type = "l",  ylim = c(0,5), main = "Local Maximum Filter with Variable Window Size")
# Variable window definition
f <- function(x) {
y <- numeric(length(x))
y[x < 5] <- 1
y[x >= 5 & x <= 10] <- 2
y[x >= 10 & x <= 20] <- 3
y[x >= 20 $ x <=50 ] <- 4
# Variable window definition
f <- function(x) {
y <- numeric(length(x))
y[x < 5] <- 1
y[x >= 5 & x <= 10] <- 2
y[x >= 10 & x <= 20] <- 3
y[x >= 20 & x <=50 ] <- 4
y[x > 50] <- 5
return(y)
}
heights <- seq(-5,100,0.5)
ws <- f(heights)
plot(heights, ws, type = "l",  ylim = c(0,5), main = "Local Maximum Filter with Variable Window Size")
# Point-to-raster 2 resolutions
chm_p2r_05 <- rasterize_canopy(ctg_norm, 0.5, p2r(subcircle = 0.2), pkg = "terra")
chm_p2r_1 <- rasterize_canopy(ctg_norm, 1, p2r(subcircle = 0.2), pkg = "terra")
# Pitfree with and without subcircle tweak
chm_pitfree_05_1 <- rasterize_canopy(ctg_norm, 0.5, pitfree(), pkg = "terra")
chm_pitfree_05_2 <- rasterize_canopy(ctg_norm, 0.5, pitfree(subcircle = 0.2), pkg = "terra")
# Post-processing median filter
kernel <- matrix(1,3,3)
chm_p2r_05_smoothed <- terra::focal(chm_p2r_05, w = kernel, fun = median, na.rm = TRUE)
chm_p2r_1_smoothed <- terra::focal(chm_p2r_1, w = kernel, fun = median, na.rm = TRUE)
ttops_chm_p2r_05 <- locate_trees(chm_p2r_05, lmf(f))
ttops_chm_p2r_1 <- locate_trees(chm_p2r_1, lmf(f))
ttops_chm_pitfree_05_1 <- locate_trees(chm_pitfree_05_1, lmf(f))
ttops_chm_pitfree_05_2 <- locate_trees(chm_pitfree_05_2, lmf(f))
ttops_chm_p2r_05_smoothed <- locate_trees(chm_p2r_05_smoothed, lmf(f))
ttops_chm_p2r_1_smoothed <- locate_trees(chm_p2r_1_smoothed, lmf(f))
col <- height.colors(50)
plot(chm_p2r_05, main = "CHM P2R 0.5", col = col); plot(sf::st_geometry(ttops_chm_p2r_05), add = T, pch =3)
plot(chm_p2r_1, main = "CHM P2R 1", col = col); plot(sf::st_geometry(ttops_chm_p2r_1), add = T, pch = 3)
plot(chm_p2r_05_smoothed, main = "CHM P2R 0.5 smoothed", col = col); plot(sf::st_geometry(ttops_chm_p2r_05_smoothed), add = T, pch =3)
plot(chm_p2r_1_smoothed, main = "CHM P2R 1 smoothed", col = col); plot(sf::st_geometry(ttops_chm_p2r_1_smoothed), add = T, pch =3)
plot(chm_pitfree_05_1, main = "CHM PITFREE 1", col = col); plot(sf::st_geometry(ttops_chm_pitfree_05_1), add = T, pch =3)
plot(chm_pitfree_05_2, main = "CHM PITFREE 2", col = col); plot(sf::st_geometry(ttops_chm_pitfree_05_2), add = T, pch =3)
